{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ast-grep rule",
  "type": "object",
  "required": [
    "rule"
  ],
  "properties": {
    "constraints": {
      "description": "Additional meta variables pattern to filter matching",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "$ref": "#/definitions/SerializableMetaVarMatcher"
      }
    },
    "files": {
      "description": "Glob patterns to specify that the rule only applies to matching files",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "fix": {
      "description": "A pattern to auto fix the issue. It can reference metavariables appeared in rule.",
      "type": {
        "$ref": "#/definitions/SerializableFixer"
      }
    },
    "id": {
      "description": "Unique, descriptive identifier, e.g., no-unused-variable",
      "type": "string"
    },
    "ignores": {
      "description": "Glob patterns that exclude rules from applying to files",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "language": {
      "description": "Specify the language to parse and the file extension to include in matching.",
      "allOf": [
        {
          "$ref": "#/definitions/Language"
        }
      ]
    },
    "message": {
      "description": "Main message highlighting why this rule fired. It should be single line and concise, but specific enough to be understood without additional context.",
      "default": "",
      "type": "string"
    },
    "metadata": {
      "description": "Extra information for the rule",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": "string"
      }
    },
    "note": {
      "description": "Additional notes to elaborate the message and provide potential fix to the issue.",
      "type": [
        "string",
        "null"
      ]
    },
    "rule": {
      "description": "A rule object to find matching AST nodes. We have three categories of rules in ast-grep.\n\n* Atomic: the most basic rule to match AST. We have two variants: Pattern and Kind.\n\n* Relational: filter matched target according to their position relative to other nodes.\n\n* Composite: use logic operation all/any/not to compose the above rules to larger rules.\n\nEvery rule has it's unique name so we can combine several rules in one object.",
      "allOf": [
        {
          "$ref": "#/definitions/SerializableRule"
        }
      ]
    },
    "severity": {
      "description": "One of: hint, info, warning, or error",
      "default": "hint",
      "allOf": [
        {
          "$ref": "#/definitions/Severity"
        }
      ]
    },
    "transform": {
      "description": "A dictionary for metavariable manipulation. Dict key is the new variable name. Dict value is a [transformation] that specifies how meta var is processed. Warning: this is experimental option. [`https://github.com/ast-grep/ast-grep/issues/436`]",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "$ref": "#/definitions/Transformation"
      }
    },
    "url": {
      "description": "Documentation link to this rule",
      "type": [
        "string",
        "null"
      ]
    },
    "utils": {
      "description": "Utility rules that can be used in `matches`",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "$ref": "#/definitions/SerializableRule"
      }
    }
  },
  "definitions": {
    "Convert": {
      "description": "Converts the source meta variable's text content to a specified case format.",
      "type": "object",
      "required": [
        "source",
        "toCase"
      ],
      "properties": {
        "separatedBy": {
          "description": "optional separators to specify how to separate word",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Separator"
          }
        },
        "source": {
          "description": "source meta variable to be transformed",
          "type": "string"
        },
        "toCase": {
          "description": "the target case format to convert the text content to",
          "allOf": [
            {
              "$ref": "#/definitions/StringCase"
            }
          ]
        }
      }
    },
    "Language": {
      "type": "string"
    },
    "PatternStyle": {
      "description": "A String pattern will match one single AST node according to pattern syntax. Or an object with field `context` and `selector`.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "context",
            "selector"
          ],
          "properties": {
            "context": {
              "description": "The surrounding code that helps to resolve any ambiguity in the syntax.",
              "type": "string"
            },
            "selector": {
              "description": "The sub-syntax node kind that is the actual matcher of the pattern.",
              "type": "string"
            }
          }
        }
      ]
    },
    "Relation": {
      "type": "object",
      "properties": {
        "all": {
          "description": "A list of sub rules and matches a node if all of sub rules match. The meta variables of the matched node contain all variables from the sub-rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SerializableRule"
          }
        },
        "any": {
          "description": "A list of sub rules and matches a node if any of sub rules match. The meta variables of the matched node only contain those of the matched sub-rule.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SerializableRule"
          }
        },
        "field": {
          "type": [
            "string",
            "null"
          ]
        },
        "follows": {
          "description": "`follows` accepts a relational rule object. the target node must appear after another node matching the `follows` sub-rule.",
          "$ref": "#/definitions/Relation"
        },
        "has": {
          "description": "`has` accepts a relational rule object. the target node must has a descendant node matching the `has` sub-rule.",
          "$ref": "#/definitions/Relation"
        },
        "inside": {
          "description": "`inside` accepts a relational rule object. the target node must appear inside of another node matching the `inside` sub-rule.",
          "$ref": "#/definitions/Relation"
        },
        "kind": {
          "description": "The kind name of the node to match. You can look up code's kind names in playground.",
          "type": "string"
        },
        "matches": {
          "description": "A utility rule id and matches a node if the utility rule matches.",
          "type": "string"
        },
        "not": {
          "description": "A single sub-rule and matches a node if the sub rule does not match.",
          "$ref": "#/definitions/SerializableRule"
        },
        "pattern": {
          "description": "A pattern string or a pattern object.",
          "$ref": "#/definitions/PatternStyle"
        },
        "precedes": {
          "description": "`precedes` accepts a relational rule object. the target node must appear before another node matching the `precedes` sub-rule.",
          "$ref": "#/definitions/Relation"
        },
        "regex": {
          "description": "A Rust regular expression to match the node's text. https://docs.rs/regex/latest/regex/#syntax",
          "type": "string"
        },
        "stopBy": {
          "default": "neighbor",
          "allOf": [
            {
              "$ref": "#/definitions/SerializableStopBy"
            }
          ]
        }
      }
    },
    "Replace": {
      "description": "Replaces a substring in the meta variable's text content with another string.",
      "type": "object",
      "required": [
        "by",
        "replace",
        "source"
      ],
      "properties": {
        "by": {
          "description": "the replacement string",
          "type": "string"
        },
        "replace": {
          "description": "a regex to find substring to be replaced",
          "type": "string"
        },
        "source": {
          "description": "source meta variable to be transformed",
          "type": "string"
        }
      }
    },
    "Separator": {
      "type": "string",
      "enum": [
        "caseChange",
        "dash",
        "dot",
        "slash",
        "space",
        "underscore"
      ]
    },
    "SerializableFixConfig": {
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "expandEnd": {
          "$ref": "#/definitions/Relation"
        },
        "expandStart": {
          "$ref": "#/definitions/Relation"
        },
        "template": {
          "type": "string"
        }
      }
    },
    "SerializableFixer": {
      "description": "A pattern string or fix object to auto fix the issue. It can reference metavariables appeared in rule.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/SerializableFixConfig"
        }
      ]
    },
    "SerializableMetaVarMatcher": {
      "oneOf": [
        {
          "description": "A regex to filter metavar based on its textual content.",
          "type": "object",
          "required": [
            "regex"
          ],
          "properties": {
            "regex": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A pattern to filter matched metavar based on its AST tree shape.",
          "type": "object",
          "required": [
            "pattern"
          ],
          "properties": {
            "pattern": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A kind_id to filter matched metavar based on its ts-node kind",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SerializableRule": {
      "type": "object",
      "properties": {
        "all": {
          "description": "A list of sub rules and matches a node if all of sub rules match. The meta variables of the matched node contain all variables from the sub-rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SerializableRule"
          }
        },
        "any": {
          "description": "A list of sub rules and matches a node if any of sub rules match. The meta variables of the matched node only contain those of the matched sub-rule.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SerializableRule"
          }
        },
        "follows": {
          "description": "`follows` accepts a relational rule object. the target node must appear after another node matching the `follows` sub-rule.",
          "$ref": "#/definitions/Relation"
        },
        "has": {
          "description": "`has` accepts a relational rule object. the target node must has a descendant node matching the `has` sub-rule.",
          "$ref": "#/definitions/Relation"
        },
        "inside": {
          "description": "`inside` accepts a relational rule object. the target node must appear inside of another node matching the `inside` sub-rule.",
          "$ref": "#/definitions/Relation"
        },
        "kind": {
          "description": "The kind name of the node to match. You can look up code's kind names in playground.",
          "type": "string"
        },
        "matches": {
          "description": "A utility rule id and matches a node if the utility rule matches.",
          "type": "string"
        },
        "not": {
          "description": "A single sub-rule and matches a node if the sub rule does not match.",
          "$ref": "#/definitions/SerializableRule"
        },
        "pattern": {
          "description": "A pattern string or a pattern object.",
          "$ref": "#/definitions/PatternStyle"
        },
        "precedes": {
          "description": "`precedes` accepts a relational rule object. the target node must appear before another node matching the `precedes` sub-rule.",
          "$ref": "#/definitions/Relation"
        },
        "regex": {
          "description": "A Rust regular expression to match the node's text. https://docs.rs/regex/latest/regex/#syntax",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SerializableStopBy": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "neighbor",
            "end"
          ]
        },
        {
          "$ref": "#/definitions/SerializableRule"
        }
      ]
    },
    "Severity": {
      "oneOf": [
        {
          "description": "A kind reminder for code with potential improvement.",
          "type": "string",
          "enum": [
            "hint"
          ]
        },
        {
          "description": "A suggestion that code can be improved or optimized.",
          "type": "string",
          "enum": [
            "info"
          ]
        },
        {
          "description": "A warning that code might produce bugs or does not follow best practice.",
          "type": "string",
          "enum": [
            "warning"
          ]
        },
        {
          "description": "An error that code produces bugs or has logic errors.",
          "type": "string",
          "enum": [
            "error"
          ]
        },
        {
          "description": "Turns off the rule.",
          "type": "string",
          "enum": [
            "off"
          ]
        }
      ]
    },
    "StringCase": {
      "type": "string",
      "enum": [
        "lowerCase",
        "upperCase",
        "capitalize",
        "camelCase",
        "snakeCase",
        "kebabCase",
        "pascalCase"
      ]
    },
    "Substring": {
      "description": "Extracts a substring from the meta variable's text content.\n\nBoth `start_char` and `end_char` support negative indexing, which counts character from the end of an array, moving backwards.",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "endChar": {
          "description": "optional ending character index of the substring, defaults to the end of the string.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "source": {
          "description": "source meta variable to be transformed",
          "type": "string"
        },
        "startChar": {
          "description": "optional starting character index of the substring, defaults to 0.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      }
    },
    "Transformation": {
      "description": "Represents a transformation that can be applied to a matched AST node. Available transformations are `substring`, `replace` and `convert`.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "substring"
          ],
          "properties": {
            "substring": {
              "$ref": "#/definitions/Substring"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "replace"
          ],
          "properties": {
            "replace": {
              "$ref": "#/definitions/Replace"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "convert"
          ],
          "properties": {
            "convert": {
              "$ref": "#/definitions/Convert"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
